function standardizeBookEntries(colIndexes, data) {
  const responses = UrlFetchApp.fetchAll(
    data.map(row => {
      const title = row[colIndexes['book title']];
      const author = row[colIndexes['book author']];
      return {
        url: `https://www.googleapis.com/books/v1/volumes?q=intitle:${encodeURIComponent(title)}+inauthor:${encodeURIComponent(author)}&maxResults:1&orderBy:relevance&country=US`,
        muteHttpExceptions: true // Handle errors
      };
    })
  );

  const standardValues = responses.map((res, i) => {
    const json = JSON.parse(res.getContentText());

    if (json.totalItems && json.items?.[0]?.volumeInfo){
      const volumeInfo = json.items[0].volumeInfo;

      const title = volumeInfo.subtitle 
            ? `${volumeInfo.title}: ${volumeInfo.subtitle}` // Combine title and subtitle
            : volumeInfo.title || data[i][colIndexes['book title']];
      const author = json.items[0].volumeInfo.authors?.[0] || data[i][colIndexes['book author']];

      return [title, author];

    } else {
      return [data[i][colIndexes['book title']], data[i][colIndexes['book author']]];
    }
  });

  return standardValues;

}

function processData(sheet, maxRows, batchSize, colIndexes, formattedDateTime, newSheet) {
  let lastRow = parseInt(PropertiesService.getScriptProperties().getProperty('lastProcessedRow')) || 2; // Start from last processed row or 2 (after header)

  while (lastRow <= maxRows) {
    const endRow = Math.min(lastRow + batchSize - 1, maxRows);
    const range = sheet.getRange(lastRow, 1, endRow - lastRow + 1, sheet.getLastColumn());
    const data = range.getValues();

    const startTime = Date.now();
    const standardValues = standardizeBookEntries(colIndexes, data);
    console.log(`Batch ${lastRow}-${endRow} processed in ${Date.now() - startTime}ms`);

    newSheet.getRange(lastRow, 1, data.length, data[0].length).setValues(
      data.map((row, i) =>
        row.map((val, j) => {
          return j === colIndexes['book title'] ? standardValues[i][0] :
                 j === colIndexes['book author'] ? standardValues[i][1] :
                 j === colIndexes['last reviewed'] ? formattedDateTime : val;
        })
      )
    );

    lastRow = endRow + 1;
    PropertiesService.getScriptProperties().setProperty('lastProcessedRow', lastRow);

    if (lastRow <= maxRows) Utilities.sleep(1000); // Rate limiting

  }
}

function runStandardizationService(){
  console.time("processData");

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Dashboard source");
  const maxRows = sheet.getLastRow(); 
  const batchSize = 500; // Number of rows to process per batch

  const formattedDateTime = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "MM/dd/yyyy");

  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const colIndexes = headers.reduce((acc, header, i) => {
    if (['Book Title:', 'Book Author:', 'Last Reviewed:'].includes(header)) {
      acc[header.replace(':', '').toLowerCase()] = i;
    }
    return acc;
  }, {});

  // Optionally reset lastProcessedRow for testing
  // PropertiesService.getScriptProperties().deleteProperty('lastProcessedRow'); 

  // Create a new sheet to save the standardized information
  const newSheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet("Standardized Book Data - " + formattedDateTime); 
  newSheet.getRange(1, 1, 1, sheet.getLastColumn()).setValues([headers]);

  processData(sheet, maxRows, batchSize, colIndexes, formattedDateTime, newSheet);
  
  console.timeEnd("processData");

  return;
}

function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('OBAW')
      .addItem('Standardize data', 'runStandardizationService')
      .addToUi();
}
